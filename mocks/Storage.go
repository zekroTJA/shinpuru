// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	io "io"

	config "github.com/zekroTJA/shinpuru/internal/services/config"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// BucketExists provides a mock function with given fields: name
func (_m *Storage) BucketExists(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for BucketExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connect provides a mock function with given fields: cfg
func (_m *Storage) Connect(cfg config.Provider) error {
	ret := _m.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(config.Provider) error); ok {
		r0 = rf(cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBucket provides a mock function with given fields: name, location
func (_m *Storage) CreateBucket(name string, location ...string) error {
	_va := make([]interface{}, len(location))
	for _i := range location {
		_va[_i] = location[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(name, location...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBucketIfNotExists provides a mock function with given fields: name, location
func (_m *Storage) CreateBucketIfNotExists(name string, location ...string) error {
	_va := make([]interface{}, len(location))
	for _i := range location {
		_va[_i] = location[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBucketIfNotExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(name, location...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteObject provides a mock function with given fields: bucketName, objectName
func (_m *Storage) DeleteObject(bucketName string, objectName string) error {
	ret := _m.Called(bucketName, objectName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bucketName, objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetObject provides a mock function with given fields: bucketName, objectName
func (_m *Storage) GetObject(bucketName string, objectName string) (io.ReadCloser, int64, error) {
	ret := _m.Called(bucketName, objectName)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 io.ReadCloser
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (io.ReadCloser, int64, error)); ok {
		return rf(bucketName, objectName)
	}
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(bucketName, objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) int64); ok {
		r1 = rf(bucketName, objectName)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(bucketName, objectName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PutObject provides a mock function with given fields: bucketName, objectName, reader, objectSize, mimeType
func (_m *Storage) PutObject(bucketName string, objectName string, reader io.Reader, objectSize int64, mimeType string) error {
	ret := _m.Called(bucketName, objectName, reader, objectSize, mimeType)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, io.Reader, int64, string) error); ok {
		r0 = rf(bucketName, objectName, reader, objectSize, mimeType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Storage) Status() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
